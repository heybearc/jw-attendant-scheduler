"use strict";(()=>{var e={};e.id=3263,e.ids=[3263],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1726:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>m,patchFetch:()=>x,requestAsyncStorage:()=>d,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>l});var s={};t.r(s),t.d(s,{GET:()=>c});var a=t(9303),n=t(8716),o=t(670),i=t(7070);let u=new(t(3524)).PrismaClient;async function c(e){try{let{searchParams:r}=new URL(e.url),t=r.get("q");if(!t)return i.NextResponse.json({error:"Search query is required"},{status:400});let s=await u.users.findMany({where:{OR:[{firstName:{contains:t}},{lastName:{contains:t}},{email:{contains:t}}],isActive:!0},orderBy:{createdAt:"desc"}});return i.NextResponse.json(s)}catch(e){return console.error("Failed to search count users:",e),i.NextResponse.json({error:"Failed to search count users"},{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/counts/search/route",pathname:"/api/counts/search",filename:"route",bundlePath:"app/api/counts/search/route"},resolvedPagePath:"/Users/cory/Documents/Cloudy-Work/applications/jw-attendant-scheduler/app/api/counts/search/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:l,serverHooks:h}=p,m="/api/counts/search/route";function x(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:l})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[9276,5972],()=>t(1726));module.exports=s})();