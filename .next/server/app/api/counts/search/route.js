"use strict";(()=>{var e={};e.id=263,e.ids=[263],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1726:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>m,patchFetch:()=>x,requestAsyncStorage:()=>d,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>l});var s={};r.r(s),r.d(s,{GET:()=>c});var n=r(9303),o=r(8716),a=r(670),i=r(7070);let u=new(r(3524)).PrismaClient;async function c(e){try{let{searchParams:t}=new URL(e.url),r=t.get("q");if(!r)return i.NextResponse.json({error:"Search query is required"},{status:400});let s=await u.count_sessions.findMany({where:{OR:[{sessionName:{contains:r}},{notes:{contains:r}}],isActive:!0},include:{events:!0},orderBy:{countTime:"desc"}});return i.NextResponse.json(s)}catch(e){return console.error("Failed to search count sessions:",e),i.NextResponse.json({error:"Failed to search count sessions"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/counts/search/route",pathname:"/api/counts/search",filename:"route",bundlePath:"app/api/counts/search/route"},resolvedPagePath:"/Users/cory/Documents/Cloudy-Work/applications/jw-attendant-scheduler/app/api/counts/search/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:l,serverHooks:h}=p,m="/api/counts/search/route";function x(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:l})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[276,972],()=>r(1726));module.exports=s})();