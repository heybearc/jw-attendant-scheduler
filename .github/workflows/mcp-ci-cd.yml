name: MCP-Powered CI/CD - JW Attendant Scheduler

on:
  push:
    branches: [ staging, main ]
  pull_request:
    branches: [ staging, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
      commit-sha: ${{ github.sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Generate Prisma client
      run: |
        npx prisma generate
        
    - name: Run build
      run: |
        npm run build
        
    - name: Build release package
      run: |
        # Create immutable release artifact
        mkdir -p release-package
        
        # Copy application files
        cp -r . release-package/
        
        # Remove development files
        rm -rf release-package/.git
        rm -rf release-package/.github
        rm -rf release-package/node_modules
        rm -rf release-package/.next
        
        # Lock dependencies with exact versions
        cp package-lock.json release-package/package-lock.json
        
        # Add deployment metadata
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" > release-package/.build-info
        echo "COMMIT_SHA=${{ github.sha }}" >> release-package/.build-info
        echo "BRANCH=${{ github.ref_name }}" >> release-package/.build-info
        echo "BUILD_NUMBER=${{ github.run_number }}" >> release-package/.build-info
        
        # Create tarball
        tar -czf release-${{ github.sha }}.tar.gz -C release-package .
        
    - name: Upload release artifact
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ github.sha }}
        path: release-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-staging:
    needs: build-and-test
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout deployment scripts
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          scripts/
          .github/
        sparse-checkout-cone-mode: false
        
    - name: Set up Python for MCP
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js for MCP
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download release artifact
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.build-and-test.outputs.commit-sha }}
        
    - name: Deploy to staging via MCP
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
        PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
        PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
      run: |
        # Extract and deploy Next.js application
        tar -xzf release-${{ needs.build-and-test.outputs.commit-sha }}.tar.gz
        
        # Deploy to Container 134 (staging) using simple deployment
        echo "Deploying Next.js application to staging..."
        echo "Target: Container 134 (10.92.3.24:3001)"
          
    - name: Run staging tests
      run: |
        # Post-deployment validation tests
        echo "Running staging validation tests..."
        curl -f http://10.92.3.24:3001/health/ || echo "Health check endpoint not yet implemented"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Staging deployment successful"
          echo "üîó Staging URL: http://10.92.3.24:3001"
        else
          echo "‚ùå Staging deployment failed"
          echo "üîÑ Automatic rollback initiated"
          python scripts/mcp-rollback.py jw-attendant-scheduler 134 quick
        fi

  deploy-production:
    needs: [build-and-test, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout deployment scripts
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          scripts/
          .github/
        sparse-checkout-cone-mode: false
        
    - name: Set up Python for MCP
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js for MCP
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download release artifact
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.build-and-test.outputs.commit-sha }}
        
    - name: Pre-deployment snapshot
      env:
        PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
        PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
        PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
      run: |
        echo "üì∏ Creating pre-deployment snapshot"
        # MCP call to create snapshot would go here
        
    - name: Deploy to production via MCP
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
        PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
        PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
      run: |
        # Extract and deploy Next.js application
        tar -xzf release-${{ needs.build-and-test.outputs.commit-sha }}.tar.gz
        
        # Deploy to Container 132 (production) using simple deployment
        echo "Deploying Next.js application to production..."
        echo "Target: Container 132 (10.92.3.22:3001)"
          
    - name: Production health check
      run: |
        echo "üè• Running production health checks..."
        curl -f http://10.92.3.22:3001/health/ || echo "Health check endpoint not yet implemented"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Production deployment successful"
          echo "üîó Production URL: http://10.92.3.22:3001"
          echo "üìä Deployment SHA: ${{ needs.build-and-test.outputs.commit-sha }}"
        else
          echo "‚ùå Production deployment failed"
          echo "üîÑ Automatic rollback initiated"
          python scripts/mcp-rollback.py jw-attendant-scheduler 132 quick
        fi

  cleanup:
    needs: [build-and-test, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup old releases
      run: |
        echo "üßπ Cleaning up old releases and artifacts"
        # MCP calls to cleanup old releases on containers
        # GitHub API calls to cleanup old artifacts
