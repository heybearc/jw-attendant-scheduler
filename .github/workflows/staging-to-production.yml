name: Deploy Staging to Production

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_qos_checks:
        description: 'Skip QoS checks (emergency only)'
        required: false
        default: false
        type: boolean

jobs:
  qos-checks:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_qos_checks != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium webdriver-manager beautifulsoup4 requests
        
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.JW_ATTENDANT_SSH_KEY }}
        
    - name: Add SSH known hosts
      run: |
        ssh-keyscan -H 10.92.3.22 >> ~/.ssh/known_hosts
        
    - name: Run error fixer on staging
      run: |
        ssh root@10.92.3.22 'cd /opt/jw-attendant-staging && source venv/bin/activate && python3 tests/qos/error_fixer.py --settings=jw_scheduler.settings --check-only'
        
    - name: Run link checker on staging
      run: |
        ssh root@10.92.3.22 'cd /opt/jw-attendant-staging && source venv/bin/activate && python3 tests/qos/link_checker.py --base-url=http://localhost:8001 --username=admin --password=admin123'
        
    - name: Run stability tests on staging
      run: |
        ssh root@10.92.3.22 'cd /opt/jw-attendant-staging && source venv/bin/activate && python3 -m pytest tests/stability/test_stability.py -v'
        
    - name: Check performance metrics
      run: |
        # Query Prometheus for performance metrics
        RESPONSE_TIME=$(ssh root@10.92.3.22 'curl -s "http://localhost:9090/api/v1/query?query=avg(django_http_requests_latency_seconds_by_view_method_sum/django_http_requests_latency_seconds_by_view_method_count)"')
        echo "Average response time: $RESPONSE_TIME"
        
        # Check if response time is below threshold (300ms)
        python -c "import json, sys; data=json.loads('$RESPONSE_TIME'); sys.exit(0 if float(data['data']['result'][0]['value'][1]) < 0.3 else 1)"
        
    - name: Check error rate
      run: |
        # Query Prometheus for error rate
        ERROR_RATE=$(ssh root@10.92.3.22 'curl -s "http://localhost:9090/api/v1/query?query=sum(rate(django_http_responses_total_by_status_total{status=~\"5..\"}[5m]))/sum(rate(django_http_responses_total_by_status_total[5m]))"')
        echo "Error rate: $ERROR_RATE"
        
        # Check if error rate is below threshold (1%)
        python -c "import json, sys; data=json.loads('$ERROR_RATE'); sys.exit(0 if float(data['data']['result'][0]['value'][1]) < 0.01 else 1)"
  
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: qos-checks
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (success() || github.event.inputs.skip_qos_checks == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.JW_ATTENDANT_SSH_KEY }}
        
    - name: Add SSH known hosts
      run: |
        ssh-keyscan -H 10.92.3.22 >> ~/.ssh/known_hosts
        ssh-keyscan -H 10.92.3.23 >> ~/.ssh/known_hosts
        
    - name: Deploy to Production
      run: |
        # Backup current production
        ssh root@10.92.3.23 'cd /opt/jw-attendant-production && cp -r . /opt/backups/jw-attendant-$(date +%Y%m%d_%H%M%S)/'
        
        # Sync from staging to production
        ssh root@10.92.3.22 'cd /opt/jw-attendant-staging && rsync -avz --exclude=venv --exclude=__pycache__ --exclude=.git . root@10.92.3.23:/opt/jw-attendant-production/'
        
        # Run migrations on production
        ssh root@10.92.3.23 'cd /opt/jw-attendant-production && source venv/bin/activate && python3 manage.py migrate'
        
        # Collect static files
        ssh root@10.92.3.23 'cd /opt/jw-attendant-production && source venv/bin/activate && python3 manage.py collectstatic --noinput'
        
        # Restart production service
        ssh root@10.92.3.23 'systemctl restart jw-attendant-production'
        
        # Health check
        sleep 10
        curl -f http://10.92.3.23:8000/health/ || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Production deployment successful"
        echo "üîó Production URL: http://10.92.3.23:8000"
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed, initiating rollback"
        # Find latest backup
        BACKUP=$(ssh root@10.92.3.23 'ls -t /opt/backups/jw-attendant-* | head -1')
        # Restore from backup
        ssh root@10.92.3.23 "cd /opt && rm -rf jw-attendant-production && cp -r $BACKUP jw-attendant-production"
        # Restart service
        ssh root@10.92.3.23 'systemctl restart jw-attendant-production'
